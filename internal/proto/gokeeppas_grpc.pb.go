// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: internal/proto/gokeepas.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeepPas_SignUp_FullMethodName = "/gokeepas.KeepPas/SignUp"
	KeepPas_LogIn_FullMethodName  = "/gokeepas.KeepPas/LogIn"
	KeepPas_Add_FullMethodName    = "/gokeepas.KeepPas/Add"
	KeepPas_Get_FullMethodName    = "/gokeepas.KeepPas/Get"
	KeepPas_GetKey_FullMethodName = "/gokeepas.KeepPas/GetKey"
	KeepPas_List_FullMethodName   = "/gokeepas.KeepPas/List"
	KeepPas_Remove_FullMethodName = "/gokeepas.KeepPas/Remove"
	KeepPas_Rename_FullMethodName = "/gokeepas.KeepPas/Rename"
	KeepPas_Update_FullMethodName = "/gokeepas.KeepPas/Update"
	KeepPas_Copy_FullMethodName   = "/gokeepas.KeepPas/Copy"
)

// KeepPasClient is the client API for KeepPas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeepPasClient interface {
	SignUp(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	LogIn(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Add(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*BinResponse, error)
	Get(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetKey(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	List(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Remove(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*BinResponse, error)
	Rename(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*BinResponse, error)
	Update(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*BinResponse, error)
	Copy(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*BinResponse, error)
}

type keepPasClient struct {
	cc grpc.ClientConnInterface
}

func NewKeepPasClient(cc grpc.ClientConnInterface) KeepPasClient {
	return &keepPasClient{cc}
}

func (c *keepPasClient) SignUp(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, KeepPas_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keepPasClient) LogIn(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, KeepPas_LogIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keepPasClient) Add(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*BinResponse, error) {
	out := new(BinResponse)
	err := c.cc.Invoke(ctx, KeepPas_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keepPasClient) Get(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, KeepPas_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keepPasClient) GetKey(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, KeepPas_GetKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keepPasClient) List(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, KeepPas_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keepPasClient) Remove(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*BinResponse, error) {
	out := new(BinResponse)
	err := c.cc.Invoke(ctx, KeepPas_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keepPasClient) Rename(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*BinResponse, error) {
	out := new(BinResponse)
	err := c.cc.Invoke(ctx, KeepPas_Rename_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keepPasClient) Update(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*BinResponse, error) {
	out := new(BinResponse)
	err := c.cc.Invoke(ctx, KeepPas_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keepPasClient) Copy(ctx context.Context, in *BinRequest, opts ...grpc.CallOption) (*BinResponse, error) {
	out := new(BinResponse)
	err := c.cc.Invoke(ctx, KeepPas_Copy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeepPasServer is the server API for KeepPas service.
// All implementations must embed UnimplementedKeepPasServer
// for forward compatibility
type KeepPasServer interface {
	SignUp(context.Context, *AuthRequest) (*AuthResponse, error)
	LogIn(context.Context, *AuthRequest) (*AuthResponse, error)
	Add(context.Context, *BinRequest) (*BinResponse, error)
	Get(context.Context, *BinRequest) (*GetResponse, error)
	GetKey(context.Context, *BinRequest) (*AuthResponse, error)
	List(context.Context, *BinRequest) (*ListResponse, error)
	Remove(context.Context, *BinRequest) (*BinResponse, error)
	Rename(context.Context, *BinRequest) (*BinResponse, error)
	Update(context.Context, *BinRequest) (*BinResponse, error)
	Copy(context.Context, *BinRequest) (*BinResponse, error)
	mustEmbedUnimplementedKeepPasServer()
}

// UnimplementedKeepPasServer must be embedded to have forward compatible implementations.
type UnimplementedKeepPasServer struct {
}

func (UnimplementedKeepPasServer) SignUp(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedKeepPasServer) LogIn(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogIn not implemented")
}
func (UnimplementedKeepPasServer) Add(context.Context, *BinRequest) (*BinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedKeepPasServer) Get(context.Context, *BinRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKeepPasServer) GetKey(context.Context, *BinRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedKeepPasServer) List(context.Context, *BinRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedKeepPasServer) Remove(context.Context, *BinRequest) (*BinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedKeepPasServer) Rename(context.Context, *BinRequest) (*BinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedKeepPasServer) Update(context.Context, *BinRequest) (*BinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKeepPasServer) Copy(context.Context, *BinRequest) (*BinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedKeepPasServer) mustEmbedUnimplementedKeepPasServer() {}

// UnsafeKeepPasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeepPasServer will
// result in compilation errors.
type UnsafeKeepPasServer interface {
	mustEmbedUnimplementedKeepPasServer()
}

func RegisterKeepPasServer(s grpc.ServiceRegistrar, srv KeepPasServer) {
	s.RegisterService(&KeepPas_ServiceDesc, srv)
}

func _KeepPas_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepPasServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeepPas_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepPasServer).SignUp(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeepPas_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepPasServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeepPas_LogIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepPasServer).LogIn(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeepPas_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepPasServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeepPas_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepPasServer).Add(ctx, req.(*BinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeepPas_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepPasServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeepPas_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepPasServer).Get(ctx, req.(*BinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeepPas_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepPasServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeepPas_GetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepPasServer).GetKey(ctx, req.(*BinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeepPas_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepPasServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeepPas_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepPasServer).List(ctx, req.(*BinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeepPas_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepPasServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeepPas_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepPasServer).Remove(ctx, req.(*BinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeepPas_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepPasServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeepPas_Rename_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepPasServer).Rename(ctx, req.(*BinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeepPas_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepPasServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeepPas_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepPasServer).Update(ctx, req.(*BinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeepPas_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepPasServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeepPas_Copy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepPasServer).Copy(ctx, req.(*BinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeepPas_ServiceDesc is the grpc.ServiceDesc for KeepPas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeepPas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gokeepas.KeepPas",
	HandlerType: (*KeepPasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _KeepPas_SignUp_Handler,
		},
		{
			MethodName: "LogIn",
			Handler:    _KeepPas_LogIn_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _KeepPas_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KeepPas_Get_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _KeepPas_GetKey_Handler,
		},
		{
			MethodName: "List",
			Handler:    _KeepPas_List_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _KeepPas_Remove_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _KeepPas_Rename_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _KeepPas_Update_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _KeepPas_Copy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/gokeepas.proto",
}
